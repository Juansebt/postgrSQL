--Creación de dominios

CREATE DOMAIN CLINICA.ID_PACIENTE AS CHAR(6) NOT NULL
	CHECK (VALUE ~ '^[P]{1}[-]{1}\d{4}$');
	
CREATE DOMAIN CLINICA.ID_MEESPECIALISTA AS CHAR(7) NOT NULL
	CHECK (VALUE ~ '^[ME]{2}[-]{1}\d{4}$');
	
CREATE DOMAIN CLINICA.ID_CITA AS CHAR(7) NOT NULL
	CHECK (VALUE ~ '^[CM]{2}[-]{1}\d{4}$');
	
--Creación de tablas

CREATE TABLE CLINICA.PACIENTE (
	pk_idPaciente CLINICA.ID_PACIENTE,
	nombre VARCHAR(20) NOT NULL,
	apellido VARCHAR(20) NOT NULL,
	sexo CHAR(1) NOT NULL,
	fechaNacimiento DATE NOT NULL,
	ciudad VARCHAR(20) NOT NULL,
	estado VARCHAR(20) NOT NULL,
	telefono CHAR(10) UNIQUE,
	PRIMARY KEY (pk_idPaciente)
);

CREATE TABLE CLINICA.ESPECIALISTA (
	pk_idEspecialista CLINICA.ID_MEESPECIALISTA,
	nombre VARCHAR(20) NOT NULL,
	apellido VARCHAR(20) NOT NULL,
	sexo CHAR(1) NOT NULL,
	fechaNacimiento DATE NOT NULL,
	especialidad VARCHAR(30) NOT NULL,
	PRIMARY KEY (pk_idEspecialista)
);

CREATE TABLE CLINICA.CITA (
	pk_idCita CLINICA.ID_CITA,
	fk_idPaciente CLINICA.ID_PACIENTE,
	fecha DATE  NOT NULL,
	hora TIME NOT NULL,
	PRIMARY KEY (pk_idCita),
	FOREIGN KEY (fk_idPaciente) REFERENCES CLINICA.PACIENTE (pk_idPaciente) ON UPDATE CASCADE ON 
	DELETE CASCADE
);

CREATE TABLE CLINICA.AGENDAR_CITA (
	fk_idCita CLINICA.ID_CITA,
	fk_idEspecialista CLINICA.ID_MEESPECIALISTA,
	consultorio VARCHAR(20) NOT NULL,
	fechaCita DATE NOT NULL,
	horaCita TIME NOT NULL,
	turno VARCHAR(10) NOT NULL,
	status VARCHAR(10) NOT NULL,
	observacionesConsulta VARCHAR(100) NOT NULL,
	PRIMARY KEY (fk_idCita, fk_idEspecialista),
	FOREIGN KEY (fk_idCita) REFERENCES CLINICA.CITA (pk_idCita) ON UPDATE CASCADE ON 
	DELETE CASCADE,
	FOREIGN KEY (fk_idEspecialista) REFERENCES CLINICA.ESPECIALISTA (pk_idEspecialista) ON UPDATE CASCADE ON 
	DELETE CASCADE
);

CREATE TABLE CLINICA.EXPEDIENTE (
	pk_idPaciente CLINICA.ID_PACIENTE,
	tipoSangre VARCHAR(20) NOT NULL,
	tipoAlergia VARCHAR(30) NOT NULL,
	padecimientoCro VARCHAR(50) NOT NULL,
	fechaCreacion TIMESTAMP NOT NULL,
	PRIMARY KEY (pk_idPaciente),
	FOREIGN KEY (pk_idPaciente) REFERENCES CLINICA.PACIENTE (pk_idPaciente) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE CLINICA.EXPEDIENTE_DIAGNOSTICO (
	folio SERIAL NOT NULL,
	fk_idEspecialista CLINICA.ID_MEESPECIALISTA,
	fk_idPaciente CLINICA.ID_PACIENTE,
	edad CHAR(3) NOT NULL,
	peso CHAR(3) NOT NULL,
	altura CHAR(4) NOT NULL,
	IMC CHAR(5) NOT NULL,
	nivelPeso CHAR(10) NOT NULL,
	presionArterial CHAR(8) NOT NULL,
	diagnostico VARCHAR(150) NOT NULL,
	recetario VARCHAR(150) NOT NULL,
	fechaCreacion TIMESTAMP NOT NULL,
	PRIMARY KEY (folio),
	FOREIGN KEY (fk_idEspecialista) REFERENCES CLINICA.ESPECIALISTA (pk_idEspecialista) ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (fk_idPaciente) REFERENCES CLINICA.PACIENTE (pk_idPaciente) ON UPDATE CASCADE ON DELETE CASCADE
);

--Modificación de tablas
--Agregar una columna

ALTER TABLE CLINICA.PACIENTE ADD COLUMN EJEMPLO VARCHAR(30);

--Borrar una columna

ALTER TABLE CLINICA.PACIENTE DROP COLUMN EJEMPLO;

--Cambiat el tipo de dato

ALTER TABLE CLINICA.PACIENTE ALTER COLUMN EJEMPLO TYPE CHAR(50);

--Renombrar columna

ALTER TABLE CLINICA.PACIENTE RENAME COLUMN EJEMPLO_NUEVO TO EJEMPLO;

--Renombrar tabla

ALTER TABLE CLINICA.PACIENTE_NUEVO RENAME TO PACIENTE;

--Borrar tabla

DROP TABLE CLINICA.PACIENTE CASCADE;
DROP TABLE CLINICA.EXPEDIENTE_DIAGNOSTICO;

--Insersión de datos
--Pacientes

INSERT INTO CLINICA.PACIENTE VALUES ('P-0001','JUAN','lAGUNA','M','2004-10-06','MEXICO','MEXICO','3122031388');

INSERT INTO CLINICA.PACIENTE (pk_idPaciente, nombre, apellido, sexo, fechaNacimiento, ciudad, estado, telefono)
VALUES ('P-0002','ANDRÉS','QUINTERO','M','2004-09-09','MONTEREY','NUEVO LEON','3227091029');

INSERT INTO CLINICA.PACIENTE VALUES 
('P-0003', 'DANIEL', 'CARMONA', 'M', '1998-12-07', 'MEXICO', 'MEXICO', '551234567'),
('P-0004', 'JUAN', 'HERNANDEZ', 'M', '1990-07-21', 'MONTERREY', 'NUEVO LEON', '551234321'),
('P-0005', 'FERNANDA', 'MORALES', 'F', '1973-07-01', 'MEXICO', 'MEXICO', '5412309872'),
('P-0006', 'ANDREA', 'ZUÑIGA', 'F', '2000-12-02', 'GUADALAJARA', 'JALISCO', '3309876522'),
('P-0007', 'ALBERTO', 'PEREYRA', 'M', '1986-10-23', 'MEXICO', 'MEXICO', '5565423983'),
('P-0008', 'KAREN', 'SOTO', 'F', '1978-07-07', 'MEXICO', 'MEXICO', '5565423097'),
('P-0009', 'ANDRES', 'ORTIZ', 'M','1990-10-09', 'MONTERREY', 'MEXICO', '5698782347'),
('P-0010', 'LESLY', 'RODRIGUEZ', 'F', '2001-02-11', 'MEXICO', 'MEXICO', '5543454352'),
('P-0011', 'ENRIQUE', 'VERA', 'M', '1996-11-12', 'GUADALAJARA', 'JALISCO', '3309815273'),
('P-0012', 'VICTORIA', 'SOLIS', 'F', '2002-03-10', 'MEXICO', 'MEXICO', '5565278126');

--Especialistas

INSERT INTO CLINICA.ESPECIALISTA VALUES 
('ME-0001', 'REYNA', 'GUADALUPE', 'F', '1986-01-01', 'MEDICO GENERAL'),
('ME-0002', 'ENRIQUE', 'ORTIZ', 'M', '1968-10-01', 'NEFROLOGIA'),
('ME-0003', 'FELIPE', 'HERNANDEZ', 'M', '1980-10-02', 'MEDICO GENERAL'),
('ME-0004', 'KENIA', 'LOPEZ', 'F', '1973-01-01', 'PEDIATRA'),
('ME-0005', 'GEORGE', 'VELASCO', 'M', '2000-01-20', 'CARDIÓLOGO'),
('ME-0006', 'JUAN', 'MARTINEZ', 'M', '1980-02-23', 'MEDICO GENERAL');

--Expediente diagnostico

INSERT INTO clinica.expediente_diagnostico(
	fk_idespecialista, fk_idpaciente, edad, peso, altura, imc, nivelpeso, presionarterial, diagnostico, recetario, fechacreacion)
	VALUES 
	('ME-0001', 'P-0001', '24', '70', '1.70', '24.0', 'NORMAL', '120/70', 'NA', 'NA', '2022-11-22'),
	('ME-0001', 'P-0002', '33', '80', '1.77', '27.0', 'SOBREPESO', '125/73', 'NA', 'NA', '2022-11-23'),
	('ME-0001', 'P-0003', '45', '62', '1.64', '26.6', 'NORMAL', '130/70', 'NA', 'NA', '2022-11-24'),
	('ME-0002', 'P-0003', '45', '62', '1.64', '26.6', 'NORMAL', '129/70', 'NA', 'NA', '2022-11-24'),
	('ME-0002', 'P-0004', '23', '65', '1.60', '23.0', 'NORMAL', '125/70', 'NA', 'NA', '2022-11-25'),
	('ME-0003', 'P-0005', '37', '90', '1.77', '29.0', 'OBESIDAD', '129/80', 'NA', 'NA', '2022-11-25'),
	('ME-0003', 'P-0005', '37', '90', '1.77', '29.0', 'OBESIDAD', '128/78', 'NA', 'NA', '2022-11-25'),
	('ME-0003', 'P-0006', '46', '72', '1.68', '24.0', 'NORMAL', '120/69', 'NA', 'NA', '2022-11-26'),
	('ME-0003', 'P-0007', '31', '76', '1.77', '24.0', 'NORMAL', '125/73', 'NA', 'NA', '2022-11-27'),
	('ME-0004', 'P-0007', '31', '76', '1.77', '24.0', 'NORMAL', '125/67', 'NA', 'NA', '2022-11-27'),
	('ME-0004', 'P-0008', '21', '68', '1.63', '24.0', 'NORMAL', '119/69', 'NA', 'NA', '2022-11-29'),
	('ME-0005', 'P-0009', '26', '90', '1.75', '29.0', 'SOBREPESO', '132/76', 'NA', 'NA', '2022-12-01'),
	('ME-0005', 'P-0009', '26', '90', '1.75', '29.0', 'SOBREPESO', '130/74', 'NA', 'NA', '2022-12-01'),
	('ME-0005', 'P-0010', '18', '60', '1.59', '23.0', 'NORMAL', '120/68', 'NA', 'NA', '2022-12-02'),
	('ME-0006', 'P-0011', '18', '60', '1.59', '23.0', 'NORMAL', '119/65', 'NA', 'NA', '2022-04-02'),
	('ME-0006', 'P-0012', '18', '64', '1.75', '23.0', 'NORMAL', '119/80', 'NA', 'NA', '2022-11-02');

--Citas

INSERT INTO CLINICA.CITA VALUES 
('CM-0001', 'P-0001', '2022-10-01', '12:00'),
('CM-0002', 'P-0002', '2022-10-01', '12:20'),
('CM-0003', 'P-0003', '2022-10-02', '12:20'),
('CM-0004', 'P-0004', '2022-10-02', '10:00'),
('CM-0005', 'P-0005', '2022-10-03', '08:20'),
('CM-0006', 'P-0006', '2022-10-03', '12:20'),
('CM-0007', 'P-0007', '2022-10-04', '12:20'),
('CM-0008', 'P-0008', '2022-10-04', '10:00'),
('CM-0009', 'P-0009', '2022-10-04', '08:20'),
('CM-0010', 'P-0010', '2022-10-05', '08:20'),
('CM-0011', 'P-0011', '2022-10-05', '12:30'),
('CM-0012', 'P-0012', '2022-10-05', '05:20');

--Agendar cita

INSERT INTO CLINICA.AGENDAR_CITA VALUES 
('CM-0001', 'ME-0001', 'CONSULTORIO 1', '2022-10-04', '12:00', 'MATUTINO', 'ESPERA', 'NA'),
('CM-0002', 'ME-0001', 'CONSULTORIO 1', '2022-10-04', '12:20', 'MATUTINO', 'ESPERA', 'NA'),
('CM-0003', 'ME-0002', 'CONSULTORIO 2', '2022-10-05', '12:00', 'MATUTINO', 'ESPERA', 'NA'),
('CM-0004', 'ME-0002', 'CONSULTORIO 2', '2022-10-05', '12:00', 'MATUTINO', 'ESPERA', 'NA'),
('CM-0005', 'ME-0003', 'CONSULTORIO 3', '2022-10-06', '12:00', 'MATUTINO', 'ESPERA', 'NA'),
('CM-0006', 'ME-0003', 'CONSULTORIO 3', '2022-10-07', '14:00', 'VESPERTINO', 'ESPERA', 'NA'),
('CM-0007', 'ME-0004', 'CONSULTORIO 4', '2022-10-07', '14:20', 'VESPERTINO', 'ESPERA', 'NA'),
('CM-0008', 'ME-0004', 'CONSULTORIO 4', '2022-10-08', '13:00', 'VESPERTINO', 'ESPERA', 'NA'),
('CM-0009', 'ME-0005', 'CONSULTORIO 5', '2022-10-08', '13:20', 'VESPERTINO', 'ESPERA', 'NA'),
('CM-0010', 'ME-0005', 'CONSULTORIO 5', '2022-10-08', '15:00', 'VESPERTINO', 'ESPERA', 'NA'),
('CM-0011', 'ME-0006', 'CONSULTORIO 6', '2022-10-08', '15:00', 'VESPERTINO', 'ESPERA', 'NA'),
('CM-0012', 'ME-0006', 'CONSULTORIO 6', '2022-10-08', '15:00', 'MATUTINO', 'ESPERA', 'NA');

--Expediente de paciente

INSERT INTO CLINICA.EXPEDIENTE VALUES
('P-0001', 'B POSITIVO', 'NA', 'NA', '2022-06-10'),
('P-0002', 'B NEGATIVO', 'ALERGIA AL POLVO', 'NA', '2022-06-10'),
('P-0003', 'O NEGATIVO', 'NA', 'DIABETES', '2022-06-14'),
('P-0004', 'B POSITIVO', 'ALERGIA A LOS MARISCOS', 'ASMA', '2022-06-15'),
('P-0005', 'B POSITIVO', 'NA', 'DIABETES', '2022-06-16'),
('P-0006', 'B POSITIVO', 'ALERGIA AL POLVO', 'NA', '2022-06-17'),
('P-0007', 'B POSITIVO', 'NA', 'CANCER', '2022-06-20'),
('P-0008', 'B POSITIVO', 'NA', 'NA', '2022-06-24'),
('P-0009', 'B POSITIVO', 'NA', 'NA', '2022-07-02'),
('P-0010', 'B POSITIVO', 'NA', 'NA', '2022-07-06'),
('P-0011', 'O POSITIVO', 'NA', 'NA', '2022-08-06'),
('P-0012', 'A NEGATIVO', 'NA', 'NA', '2022-09-06');

--Modificar datos de las tablas

UPDATE CLINICA.PACIENTE SET estado = 'MEXICO'; --Afecta todos los registros

UPDATE CLINICA.PACIENTE SET apellido = 'LAGUNA' WHERE pk_idPaciente = 'P-0001';

--Operador AND - cumple las dos o más condiciones

UPDATE CLINICA.PACIENTE SET ciudad = 'XALAPA' WHERE sexo = 'M' AND estado = 'MEXICO';

--Operador OR - cumple una o más condiciones

UPDATE CLINICA.PACIENTE SET ciudad = 'XALAPA' WHERE sexo = 'F' OR estado = 'MEXICO';

--Eliminar datos de las tablas

DELETE FROM CLINICA.PACIENTE; --Elimina todos los datos

DELETE FROM CLINICA.PACIENTE WHERE pk_idPaciente = 'P-0001';

--Consultas

SELECT * FROM CLINICA.PACIENTE;

SELECT * FROM CLINICA.ESPECIALISTA;

SELECT * FROM CLINICA.CITA;

SELECT * FROM CLINICA.AGENDAR_CITA;

SELECT * FROM CLINICA.EXPEDIENTE;

SELECT pk_idPaciente, nombre, apellido FROM CLINICA.PACIENTE;

-----------------------------------

SELECT * FROM CLINICA.PACIENTE WHERE sexo = 'M';

SELECT * FROM CLINICA.PACIENTE WHERE ciudad = 'MEXICO';

-----------------------------------

SELECT * FROM CLINICA.PACIENTE WHERE sexo = 'M' AND ciudad = 'MEXICO';

SELECT * FROM CLINICA.PACIENTE WHERE sexo = 'M' OR ciudad = 'MEXICO';

-----------------------------------

SELECT * FROM CLINICA.PACIENTE WHERE ciudad IN ('MONTEREY','GUADALAJARA');

SELECT * FROM CLINICA.PACIENTE WHERE ciudad NOT IN ('MONTEREY','GUADALAJARA');

-----------------------------------

SELECT * FROM CLINICA.PACIENTE WHERE apellido LIKE '%Z';

SELECT * FROM CLINICA.PACIENTE WHERE ciudad LIKE 'M%';

SELECT * FROM CLINICA.PACIENTE WHERE nombre LIKE '%A%';

-----------------------------------

SELECT *  FROM CLINICA.AGENDAR_CITA WHERE (fechaCita BETWEEN '2022-10-01' AND '2022-10-06') AND (turno = 'MATUTINO');

-----------------------------------

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE edad < '30';

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE edad > '30';

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE nivelPeso <> 'OBESIDAD';

-----------------------------------

SELECT folio, fk_idEspecialista, fk_idPaciente, fechaCreacion, edad FROM CLINICA.EXPEDIENTE_DIAGNOSTICO 
WHERE nivelPeso <> 'NORMAL' AND edad BETWEEN '30' AND '40';

-----------------------------------

SELECT COUNT(*) AS CANTIDAD_PACIENTES FROM CLINICA.PACIENTE;

SELECT COUNT(*) AS CANTIDAD_PACIENTES FROM CLINICA.PACIENTE WHERE ciudad = 'MEXICO';

SELECT SUM(folio) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO; 

SELECT SUM(CAST (edad AS INT)) AS SUMA_EDAD FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

SELECT SUM(CAST (peso AS INT)) AS SUMA_PESO FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

SELECT MAX(peso) AS PESO_MAX FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

SELECT MAX(edad) AS EDAD_MAX FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

SELECT MIN(peso) AS PESO_MIN FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

SELECT MIN(edad) AS EDAD_MIN FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

SELECT AVG(CAST (edad AS INT)) AS PROM_EDAD FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

SELECT AVG(CAST (peso AS INT)) AS PROM_PESO FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

SELECT MAX(edad) AS EDAD_MAX, MIN(edad) AS EDAD_MIN, SUM(CAST (edad AS INT)) AS SUMA_EDAD, 
AVG(CAST (edad AS INT)) AS EDAD_PROM, COUNT(*) AS CANTIDAD_DIAGNOSTICO FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

-----------------------------------

SELECT fk_idEspecialista FROM CLINICA.EXPEDIENTE_DIAGNOSTICO GROUP BY fk_idEspecialista;

SELECT COUNT(nivelPeso) AS CANTIDAD_PESO, nivelPeso FROM CLINICA.EXPEDIENTE_DIAGNOSTICO GROUP BY nivelPeso;

SELECT fk_idPaciente, AVG(CAST (peso AS INT)) AS PESO FROM CLINICA.EXPEDIENTE_DIAGNOSTICO GROUP BY fk_idPaciente ORDER BY fk_idPaciente;

SELECT fk_idPaciente, AVG(CAST (peso AS INT)) AS PESO FROM CLINICA.EXPEDIENTE_DIAGNOSTICO GROUP BY fk_idPaciente ORDER BY fk_idPaciente DESC;

-----------------------------------

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO ORDER BY folio DESC;

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO ORDER BY folio ASC;

-----------------------------------

SELECT fk_idEspecialista AS especialista, COUNT(fk_idEspecialista) AS citas_a_realizar FROM CLINICA.EXPEDIENTE_DIAGNOSTICO GROUP BY fk_idEspecialista HAVING COUNT(fk_idEspecialista) > 1;

SELECT fk_idPaciente AS PACIENTE, AVG(CAST (peso AS INT)) AS PESO_PROMEDIO FROM CLINICA.EXPEDIENTE_DIAGNOSTICO GROUP BY fk_idPaciente, peso HAVING AVG(CAST (peso AS INT)) < 80;

-----------------------------------

SELECT DISTINCT fk_idEspecialista FROM CLINICA.EXPEDIENTE_DIAGNOSTICO ORDER BY fk_idEspecialista;

SELECT DISTINCT fk_idPaciente FROM CLINICA.EXPEDIENTE_DIAGNOSTICO ORDER BY fk_idPaciente;

-----------------------------------

SELECT * FROM CLINICA.PACIENTE LIMIT 5;

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO ORDER BY folio DESC LIMIT 5;

-----------------------------------

--Join

--Inner join

SELECT * FROM CLINICA.PACIENTE INNER JOIN CLINICA.EXPEDIENTE ON PACIENTE.pk_idPaciente = EXPEDIENTE.pk_idPaciente;

SELECT * FROM CLINICA.PACIENTE INNER JOIN CLINICA.EXPEDIENTE ON PACIENTE.pk_idPaciente = EXPEDIENTE.pk_idPaciente WHERE PACIENTE.pk_idPaciente = 'P-0001';

--Left join

SELECT * FROM CLINICA.PACIENTE LEFT JOIN CLINICA.EXPEDIENTE ON PACIENTE.pk_idPaciente = EXPEDIENTE.pk_idPaciente;

--Right join

SELECT * FROM CLINICA.PACIENTE RIGHT JOIN CLINICA.EXPEDIENTE ON PACIENTE.pk_idPaciente = EXPEDIENTE.pk_idPaciente;

--Inner join anidado

SELECT * FROM CLINICA.PACIENTE 
INNER JOIN CLINICA.CITA ON PACIENTE.pk_idPaciente = CITA.fk_idPaciente
INNER JOIN CLINICA.AGENDAR_CITA ON CITA.pk_idCita = AGENDAR_CITA.fk_idCita
INNER JOIN CLINICA.ESPECIALISTA ON AGENDAR_CITA.fk_idEspecialista = ESPECIALISTA.pk_idEspecialista
INNER JOIN CLINICA.EXPEDIENTE_DIAGNOSTICO ON ESPECIALISTA.pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista
INNER JOIN CLINICA.EXPEDIENTE ON EXPEDIENTE_DIAGNOSTICO.fk_idPaciente = EXPEDIENTE.pk_idPaciente
WHERE PACIENTE.pk_idPaciente = 'P-0001';

--Vistas

CREATE VIEW CLINICA.PACIENTES_MASCULINOS AS SELECT * FROM CLINICA.PACIENTE WHERE sexo = 'M';

SELECT * FROM CLINICA.PACIENTES_MASCULINOS;

DROP VIEW CLINICA.PACIENTES_MASCULINOS;

ALTER VIEW CLINICA.PACIENTES_MASCULINOS RENAME TO OTRO_NOMBRE;

--Subconsultas

SELECT * FROM CLINICA.ESPECIALISTA WHERE pk_idEspecialista IN 
(SELECT fk_idEspecialista FROM CLINICA.AGENDAR_CITA WHERE fechaCita BETWEEN '2022-10-04' AND '2022-10-08');

SELECT * FROM CLINICA.PACIENTE INNER JOIN CLINICA.EXPEDIENTE_DIAGNOSTICO ON PACIENTE.pk_idPaciente = EXPEDIENTE_DIAGNOSTICO.fk_idPaciente
WHERE (sexo = 'M') AND EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista 
IN (SELECT pk_idEspecialista FROM CLINICA.ESPECIALISTA WHERE pk_idEspecialista IN ('ME-0001','ME-0003'));

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE peso 
IN (SELECT MAX(peso) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO);

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE peso 
IN (SELECT MAX(peso) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO)
OR edad IN (SELECT MAX(edad) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO);

SELECT *, (SELECT tipoSangre FROM CLINICA.EXPEDIENTE WHERE pk_idPaciente = PACIENTE.pk_idPaciente),
(SELECT padecimientoCro FROM CLINICA.EXPEDIENTE WHERE pk_idPaciente = PACIENTE.pk_idPaciente)
FROM CLINICA.PACIENTE WHERE pk_idPaciente = 'P-0001';

--Left

SELECT LEFT('HOLA ESTE ES UN MENSAJE', 9) AS MENSAJE;

SELECT nombre, apellido FROM CLINICA.PACIENTE WHERE LEFT(nombre, 1) = 'A';

--Right

SELECT RIGHT('HOLA ESTE ES UN MENSAJE', 7) AS MENSAJE;

SELECT nombre, apellido FROM CLINICA.PACIENTE WHERE RIGHT(apellido, 1) = 'Z';

--Concat

SELECT CONCAT ('EL PACIENTE CON ID: ', fk_idPaciente,' TIENE UN PESO DE: ', peso,' KG')
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

SELECT (nombre || ' ' || apellido) AS NOMBRE_COMPLETO FROM CLINICA.PACIENTE;

--Length

SELECT LENGTH ('HOLA ESTE ES UN MENSAJE');

SELECT CONCAT (nombre, ' ', apellido) AS NOMBRE_PACIENTE, LENGTH(nombre||''||apellido) AS CANTIDAD_LETRAS
FROM CLINICA.PACIENTE;

--Replace

SELECT REPLACE ('MENSSAJX','X','E');

SELECT * FROM CLINICA.EXPEDIENTE;

UPDATE CLINICA.EXPEDIENTE SET tipoSangre = REPLACE (tipoSangre, 'B', 'O') WHERE tipoAlergia = 'NA' AND padecimientoCro = 'NA';

--Funciones de fecha y hora

SELECT NOW();
SELECT CURRENT_TIME;
SELECT LEFT (CAST (CURRENT_TIME AS VARCHAR(8)), 8) AS HORA_ACTUAL;
SELECT CURRENT_DATE;
SELECT (NOW() + INTERVAL '1 DAY') AS TIEMPO_MAÑANA;
SELECT (NOW() + INTERVAL '1 HOUR') AS TIEMPO_MAÑANA;
SELECT TIMEOFDAY();

--Date part

SELECT DATE_PART('year','2012-01-01'::date) - DATE_PART('year','2010-01-01'::date) AS DIFERENCIA_AÑO;
SELECT DATE_PART('month','2012-08-01'::date) - DATE_PART('month','2011-02-01'::date) AS DIFERENCIA_MES;
SELECT DATE_PART('day','2011-10-10'::date) - DATE_PART('day','2011-10-01'::date) AS DIFERENCIA_DIA;
SELECT DATE_PART('hour','2011-10-10 15:00'::timestamp) - DATE_PART('hour','2011-10-01 09:00'::timestamp) AS DIFERENCIA_HORAS;
SELECT DATE_PART('min','2011-10-10 15:40'::timestamp) - DATE_PART('min','2011-10-01 15:00'::timestamp) AS DIFERENCIA_MINUTOS;
SELECT CONCAT( DATE_PART('sec','2012-12-30  09:00:59'::timestamp - '2011-12-30 09:00:00'::timestamp),' Segundos') AS DIFERENCIA_SEGUNDOS;

--Ejercicios consultas

--1.- SELECCIONAR LOS PACIENTE CUYOS NOMBRES TERMINEN CON UNA A O QUE SUS APELLIDOS TERMINEN CON UNA Z
--ORDENARLOS POR SU ID DE FORMA DESCENDENTE.

SELECT pk_idPaciente AS ID, nombre AS NOMBRE, apellido AS APELLIDO FROM CLINICA.PACIENTE 
WHERE nombre LIKE '%A' OR apellido LIKE '%Z' ORDER BY pk_idPaciente DESC;

--2.- CONTAR LOS ESPECIALISTAS Y AGRUPARLOS POR SU ESPECIALIDAD
--RENOMBRAR COLUMNA EN CASO QUE SEA NECESARIO

SELECT COUNT(*) AS CANTIDAD, especialidad FROM CLINICA.ESPECIALISTA GROUP BY especialidad;

SELECT COUNT(pk_idEspecialista) AS CANTIDAD, especialidad FROM CLINICA.ESPECIALISTA GROUP BY especialidad;

--3.- SELECCIONAR LOS EXPEDIENTES DIAGNOSTICOS CUYO peso sea mayor a 50 o la edad mayor a 30

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE peso > '50' OR edad > '30';

SELECT fk_idPaciente AS PACIENTE, edad, peso, altura FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE peso > '50' OR edad > '30';

--4.- SELECCIONAR LAS LLAVES FORANEAS DE PACIENTE Y ESPECIALISTA UTILIZANDO LA INSTRUCCION DISTINCT
--DE LA TABLA DE EXPEDIENTE DIAGNOSTICO

SELECT DISTINCT fk_idPaciente, fk_idEspecialista FROM CLINICA.EXPEDIENTE_DIAGNOSTICO ORDER BY fk_idPaciente;

SELECT DISTINCT (fk_idPaciente, fk_idEspecialista) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

--5.- SELECCIONAR LAS COLUMNAS DE FOLIO, ID DE PACIENTE, ID DE ESPECIALISTA Y FECHA DE CREACION 
--LOS DIAGNOSTICOS DE LOS PACIENTE QUE TENGAN UNA EDAD MAYOR A 25 Y SU NIVEL DE PESO NO SEA NORMAL,
--ADEMÁS QUE SU FECHA DE DIAGNOSTICO SEA MAYOR A FEBREO DEL 2021, ORDENARLOS POR EL ID DE ESPECIALISTA. 

SELECT folio, fk_idPaciente, fk_idEspecialista, fechaCreacion, diagnostico FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
WHERE edad > '25' AND nivelPeso <> 'NORMAL' AND fechaCreacion > '2021-02-01' ORDER BY fk_idEspecialista;

SELECT folio, fk_idPaciente, fk_idEspecialista, fechaCreacion, nivelPeso, diagnostico FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
WHERE edad > '25' AND nivelPeso NOT IN ('NORMAL') AND fechaCreacion > '2021-02-01' ORDER BY fk_idEspecialista;

--6.- SELECCIONAR LOS ESPECIALISTAS QUE HAYAN HECHO DIAGNOSTICOS CUYO NIVEL DE PESO SEA SOBREPESO.

SELECT fk_idEspecialista AS ESPECIALISTA, nivelPeso FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE nivelPeso IN ('SOBREPESO');

SELECT * FROM CLINICA.ESPECIALISTA WHERE pk_idEspecialista 
IN (SELECT fk_idEspecialista FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE nivelPeso IN ('SOBREPESO'));

--7.- SELECCIONAR CUÁNTOS DIAGNOSTICOS TIENEN CADA PACIENTE INGRESADO Y AGRUPARLOS POR SU ID, 
--ORDENARLO LA CANTIDAD DE CITAS DE MAYOR A MENOR

SELECT fk_idPaciente, COUNT(fk_idPaciente) AS cantidad_citas FROM CLINICA.EXPEDIENTE_DIAGNOSTICO 
GROUP BY fk_idPaciente ORDER BY COUNT(fk_idPaciente) DESC;

--8.- SELECCIONA LOS EXPEDIENTES DE LOS PACIENTES QUE TENGAN NIVELES DE PESO EN NORMAL Y SOBREPESO, 
--ADEMÁS QUE LOS HAYAN ATENDIDO LOS ESPECIALISTA CUYA ESPECIALIDAD NO SEA DE MEDICO GENERAL

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO  WHERE nivelPeso IN('NORMAL','SOBREPESO') 
AND fk_idEspecialista IN (SELECT pk_idEspecialista FROM CLINICA.ESPECIALISTA WHERE especialidad NOT IN ('MEDICO GENERAL'));

--9.- SELECCIONAR LOS PACIENTES QUE VIVAN EN LA CIUDAD DE MEXICO Y QUE HALLAN NACIDO DEPUES DE 1990, 
--ADEMÁS QUE NO TENGAN ALERGÍAS O PADECIMIENTOS CRONICOS
--POR ÚLTIMO QUE HALLAN RECIBIDO DIAGNOSTICOS DE LOS ESPECIALISTAS CUYOS ID SEAN: ME-0001, ME-0002 Y ME-0003

SELECT * FROM CLINICA.PACIENTE 
WHERE ciudad = 'MEXICO' AND fechaNacimiento >= '1990-01-01' 
AND pk_idPaciente IN (SELECT pk_idPaciente FROM CLINICA.EXPEDIENTE WHERE tipoAlergia = 'NA' OR padecimientoCro = 'NA')
AND pk_idPaciente IN (SELECT fk_idPaciente FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE fk_idEspecialista IN('ME-0001', 'ME-0002', 'ME-0003'));

--10.- SELECCIONAR MEDIANTE UN INNER JOIN ANIDADO LAS TABLAS DE PACIENTE, CITA, AGENDAR_CITA Y ESPECIALISTA
--ADEMÁS REALIZAR DENTRO DEL JOIN UNA SUBCONSULTA PARA SABER LOS DIAGNOSTICOS DE LOS PACIENTES
--QUE TENGAN UN PESO MAYOR A 70 O UNA EDAD MAYOR A 20

SELECT * FROM CLINICA.PACIENTE
INNER JOIN CLINICA.CITA ON PACIENTE.pk_idPaciente = CITA.fk_idPaciente
INNER JOIN CLINICA.AGENDAR_CITA ON CITA.pk_idCita = AGENDAR_CITA.fk_idCita
INNER JOIN CLINICA.ESPECIALISTA ON AGENDAR_CITA.fk_idEspecialista = ESPECIALISTA.pk_idEspecialista
WHERE PACIENTE.pk_idPaciente IN (SELECT pk_idPaciente FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE peso > '70' OR edad > '20');

--11.- SELECCIONAR LOS DIAGNOSTICOS, ADEMÁS EXTRAER LOS PACIENTES QUE SEAN DE SEXO MASCULINO,
--POR ÚLTIMO EXTRAER LAS COLUMNAS DE NOMBRE, APELLIDO Y ESPECIALIDAD DE LA TABLA DE ESPECIALISTA

SELECT *,(SELECT (nombre || ' ' || apellido || ' - ' || especialidad) AS NOMBRE_COMPLETO FROM CLINICA.ESPECIALISTA WHERE pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista)  
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
INNER JOIN CLINICA.PACIENTE ON EXPEDIENTE_DIAGNOSTICO.fk_idPaciente = PACIENTE.pk_idPaciente
WHERE PACIENTE.pk_idPaciente IN (SELECT pk_idPaciente FROM CLINICA.PACIENTE WHERE sexo = 'M');

SELECT *,(SELECT nombre FROM CLINICA.ESPECIAlISTA WHERE pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista),
(SELECT apellido FROM CLINICA.ESPECIAlISTA WHERE pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista),
(SELECT especialidad FROM CLINICA.ESPECIAlISTA WHERE pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista)
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO 
WHERE fk_idPaciente IN (SELECT pk_idPaciente FROM CLINICA.PACIENTE WHERE sexo = 'M')

--12.-MEDIANTE UN INNER JOIN SELECCIONAR LAS TABLAS DE PACIENTE CITA 
--Y AGENDAR CITA, EN DONDE LA FECHA DE CITA ESTE ENTRE DOS FECHAS
--ADEMÁS QUE LAS CIUDADES DE LOS PACIENTES SEAN MEXICO O MONTERREY, 
--POR ULTIMO QUE EL TIPO DE SANGRE DE LOS PACIENTES SEA O POSITIVO

SELECT * FROM CLINICA.PACIENTE
INNER JOIN CLINICA.CITA ON PACIENTE.pk_idPaciente = CITA.fk_idPaciente
INNER JOIN CLINICA.AGENDAR_CITA ON CITA.pk_idCita = AGENDAR_CITA.fk_idCita
WHERE fechaCita BETWEEN '2022-10-04' AND '2022-10-08'
AND ciudad = 'MEXICO' OR ciudad = 'MONTERREY'
AND pk_idPaciente IN (SELECT pk_idPaciente FROM CLINICA.EXPEDIENTE WHERE tipoSangre = 'O POSITIVO');

--Roles, usuarios y permisos

--DBA
CREATE ROLE dba WITH SUPERUSER; --Crear rol

GRANT USAGE ON SCHEMA CLINICA TO dba; --Permitir usar el esquema de la base de datos clinica

GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA CLINICA TO dba WITH GRANT OPTION; --Todos los permisos en todas las tablas

CREATE USER administrador WITH PASSWORD 'admin123' IN ROLE dba; --Crear el usuario

--Gefe especialista 
CREATE ROLE jefe_especialista;

GRANT USAGE ON SCHEMA CLINICA TO jefe_especialista;

GRANT SELECT, INSERT, UPDATE ON CLINICA.EXPEDIENTE, CLINICA.EXPEDIENTE_DIAGNOSTICO, CLINICA.ESPECIALISTA
TO jefe_especialista WITH GRANT OPTION;

GRANT DELETE ON CLINICA.ESPECIALISTA TO jefe_especialista WITH GRANT OPTION;

CREATE USER jefe_especialista_1 WITH PASSWORD '123' CONNECTION LIMIT 1 IN ROLE jefe_especialista;

--Especialista
CREATE ROLE especialista;

GRANT USAGE ON SCHEMA CLINICA TO especialista;

GRANT SELECT, INSERT, UPDATE ON CLINICA.EXPEDIENTE, CLINICA.EXPEDIENTE_DIAGNOSTICO
TO especialista WITH GRANT OPTION;

GRANT SELECT ON CLINICA.PACIENTE TO especialista WITH GRANT OPTION;

CREATE USER especialista_1 WITH PASSWORD '123' CONNECTION LIMIT 1 IN ROLE especialista;
CREATE USER especialista_2 WITH PASSWORD '123' CONNECTION LIMIT 1 IN ROLE especialista;
CREATE USER especialista_3 WITH PASSWORD '123' CONNECTION LIMIT 1 IN ROLE especialista;

--Recepcionista
CREATE ROLE recepcionista;

GRANT USAGE ON SCHEMA CLINICA TO recepcionista;

GRANT SELECT, INSERT, UPDATE ON CLINICA.PACIENTE, CLINICA.CITA, CLINICA.AGENDAR_CITA TO recepcionista WITH GRANT OPTION;

GRANT DELETE ON CLINICA.PACIENTE TO recepcionista WITH GRANT OPTION;

GRANT INSERT ON CLINICA.DATOS_PACIENTES_PERSONAL TO recepcionista WITH GRANT OPTION;

GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA TO recepcionista WITH GRANT OPTION;

CREATE USER recepcionista_1 WITH PASSWORD '123' CONNECTION LIMIT 1 IN ROLE recepcionista;
CREATE USER recepcionista_2 WITH PASSWORD '123' CONNECTION LIMIT 1 IN ROLE recepcionista;
CREATE USER recepcionista_3 WITH PASSWORD '123' CONNECTION LIMIT 1 IN ROLE recepcionista;

--Eliminar roles y quitar permisos
REVOKE SELECT, INSERT, UPDATE ON CLINICA.PACIENTE, CLINICA.CITA, CLINICA.AGENDAR_CITA
FROM recepcionista; --Quitar permisos

REVOKE DELETE ON CLINICA.PACIENTE FROM recepcionista;

REVOKE USAGE ON SCHEMA CLINICA FROM recepcionista; --Quitar permiso de schema

REVOKE INSERT ON CLINICA.DATOS_PACIENTES_PERSONAL FROM recepcionista;

REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA FROM recepcionista;

DROP ROLE recepcionista; --Eliminar rol

DROP USER recepcionista_3; --Eliminar usuario
DROP USER recepcionista_2;
DROP USER recepcionista_1;

--Eliminar especialistas
REVOKE SELECT, INSERT, UPDATE ON CLINICA.EXPEDIENTE, CLINICA.EXPEDIENTE_DIAGNOSTICO FROM especialista;

REVOKE SELECT ON CLINICA.PACIENTE FROM especialista;

REVOKE USAGE ON SCHEMA CLINICA FROM especialista;

DROP ROLE especialista;

DROP USER especialista_1;
DROP USER especialista_2;
DROP USER especialista_3;

--Eliminar jefe_especialista
REVOKE USAGE ON SCHEMA CLINICA FROM jefe_especialista;

REVOKE SELECT, INSERT, UPDATE ON CLINICA.EXPEDIENTE, CLINICA.EXPEDIENTE_DIAGNOSTICO, CLINICA.ESPECIALISTA FROM jefe_especialista;

REVOKE DELETE ON CLINICA.ESPECIALISTA FROM jefe_especialista;

DROP ROLE jefe_especialista;

DROP USER jefe_especialista_1;

--Eliminar dba/administrador
REVOKE USAGE ON SCHEMA CLINICA FROM dba;

REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA CLINICA FROM dba;

REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA CLINICA FROM dba;

REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA FROM dba;

DROP ROLE dba;

DROP USER administrador;

--Funciones

--Declarar funciones
CREATE OR REPLACE FUNCTION CLINICA.holaMundo() RETURNS VARCHAR(20) AS $$
DECLARE 
	mensaje VARCHAR(20) := 'HOLA MUNDO';
BEGIN
	RETURN mensaje;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CLINICA.sumaNumeros(num1 INT, num2 INT) RETURNS INT AS $$
BEGIN
	RETURN num1 + num2;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION CLINICA.multiplicarNumeros(num1 INT, num2 INT) RETURNS INT AS $$
BEGIN
	RETURN num1 * num2;
END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.holaMundo();
SELECT CLINICA.sumaNumeros(2,3);
SELECT CLINICA.multiplicarNumeros(4,8);

--Condicionales
CREATE OR REPLACE FUNCTION CLINICA.numMayorMenor(n1 INT, n2 INT) RETURNS VARCHAR(30) AS $$
BEGIN
	IF n1 > n2 THEN
		RETURN 'EL NÚMERO MAYOR ES: '||n1;
	ELSEIF n1<n2 THEN
		RETURN 'EL NÚMERO MAYOR ES: '||n2;
	ELSE
		RETURN 'LOS NÚMEROS SON INGUALES';
	END IF;
END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.numMayorMenor(4,4);

DROP FUNCTION clinica.nummayormenor(integer,integer); --Borrar una función

--Case when
CREATE OR REPLACE FUNCTION CLINICA.mesesAno(nMes INT) RETURNS VARCHAR(30) AS $$
DECLARE 
	mensaje VARCHAR(30) := 'El número del mes es: ';
BEGIN
	
	CASE
		WHEN nMes = 1 THEN
			RETURN mensaje || 'Enero';
		WHEN nMes = 2 THEN
			RETURN mensaje || 'Febrero';
		WHEN nMes = 3 THEN
			RETURN mensaje || 'Marzo';
		WHEN nMes = 4 THEN
			RETURN mensaje || 'Abril';
		WHEN nMes = 5 THEN
			RETURN mensaje || 'Mayo';
		WHEN nMes = 6 THEN
			RETURN mensaje || 'Junio';
		WHEN nMes = 7 THEN
			RETURN mensaje || 'Julio';
		WHEN nMes = 8 THEN
			RETURN mensaje || 'Agosto';
		WHEN nMes = 9 THEN
			RETURN mensaje || 'Septiembre';
		WHEN nMes = 10 THEN
			RETURN mensaje || 'Octubre';
		WHEN nMes = 11 THEN
			RETURN mensaje || 'Noviembre';
		WHEN nMes = 12 THEN
			RETURN mensaje || 'Diciembre';
		ELSE
			RETURN 'El número no corresponde a un mes del año';
	END CASE;
			
END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.mesesAno(10);

--Ciclos for
CREATE OR REPLACE FUNCTION CLINICA.loop(n INT)
RETURNS INT AS $$
DECLARE 
	i INT := 0;
BEGIN

	FOR i IN 1..n LOOP
		RAISE NOTICE 'CONTADOR %', i;
	END LOOP;
	
END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.loop(5);

CREATE OR REPLACE FUNCTION CLINICA.loopInverso(n INT)
RETURNS INT AS $$
DECLARE 
	i INT := 0;
BEGIN

	FOR i IN REVERSE n..1 LOOP
		RAISE NOTICE 'CONTADOR %', i;
	END LOOP;
	
END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.loopInverso(5);

CREATE OR REPLACE FUNCTION CLINICA.loopCadaDos(n INT)
RETURNS INT AS $$
DECLARE 
	i INT := 0;
BEGIN

	FOR i IN 0..n BY 2 LOOP
		RAISE NOTICE 'CONTADOR %', i;
	END LOOP;
	
END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.loopCadaDos(10);

--While
CREATE OR REPLACE FUNCTION CLINICA.while(n INT)
RETURNS INT AS $$
DECLARE
	i INT := 0;
BEGIN

	WHILE i < n LOOP
		RAISE NOTICE 'CONTADOR %', i;
		i = i + 1;
	END LOOP;

END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.while(5);

CREATE OR REPLACE FUNCTION CLINICA.numerosPares(n INT)
RETURNS INT AS $$
DECLARE
	i INT := 0;
BEGIN

	WHILE i < n LOOP
		IF (i%2)=0 THEN
			RAISE NOTICE 'CONTADOR %', i;
		END IF;
		i = i + 1;
	END LOOP;

END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.numerosPares(20);

CREATE OR REPLACE FUNCTION CLINICA.numerosImpares(n INT)
RETURNS INT AS $$
DECLARE
	i INT := 0;
BEGIN

	WHILE i < n LOOP
		IF (i%2)<>0 THEN
			RAISE NOTICE 'CONTADOR %', i;
		END IF;
		i = i + 1;
	END LOOP;

END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.numerosImpares(20);

CREATE OR REPLACE FUNCTION CLINICA.numerosParesImpares(n INT)
RETURNS INT AS $$
DECLARE
	i INT := 0;
BEGIN

	WHILE i < n LOOP
		IF (i%2)<>0 THEN
			RAISE NOTICE 'NÚMERO IMPAR %', i;
		ELSEIF (i%2)=0 THEN
			RAISE NOTICE 'NÚMERO PAR %', i;
		END IF;
		i = i + 1;
	END LOOP;

END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.numerosParesImpares(20);

--Procedure

CREATE OR REPLACE PROCEDURE CLINICA.insertarPacienteExpediente
(nombre VARCHAR(20), apellido VARCHAR(20), sexo CHAR(1), fechaNacimiento DATE,
ciudad VARCHAR(30), estado VARCHAR(30), telefono char(10), tipoSangre VARCHAR(10),
tipoAlergia VARCHAR(30), padecimientoCro VARCHAR(30))
LANGUAGE plpgsql
AS $$
DECLARE 
	idPaciente CHAR(6);
	idPacienteAux CHAR(4);
	fechaCreacion TIMESTAMP := (SELECT LEFT (CAST(CURRENT_TIMESTAMP AS CHAR(30)), 19));
BEGIN

	IF NOT EXISTS (SELECT pk_idPaciente FROM CLINICA.PACIENTE WHERE pk_idPaciente = 'P-0001') THEN
		idPaciente = 'P-0001';
	ELSE
		idPaciente := (SELECT pk_idPaciente FROM CLINICA.PACIENTE ORDER BY pk_idPaciente DESC LIMIT 1);
		idPacienteAux := (SELECT SUBSTRING(idPaciente, 3, 6));
		idPAcienteAux := CAST(idPacienteAux AS INT)+1;
		
		IF idPacienteAux < '9' THEN
			idPaciente = 'P-00' || idPacienteAux;
		ELSEIF idPacienteAux BETWEEN '10' AND '99' THEN
			idPaciente = 'P-0' || idPacienteAux;
		ELSEIF idPacienteAux BETWEEN '100' AND '999' THEN
			idPaciente = 'P-' || idPacienteAux;
		END IF;
	END IF;
	
	INSERT INTO CLINICA.PACIENTE VALUES (idPaciente, nombre, apellido, sexo, fechaNacimiento, ciudad, estado, telefono);
	
	INSERT INTO CLINICA.EXPEDIENTE VALUES (idPaciente, tipoSangre, tipoalergia, padecimientoCro, fechaCreacion);
	
	RAISE NOTICE 'PACIENTE Y EXPEDIENTE INGRESADO CORRECTAMENTE';
	
END; $$

CALL CLINICA.insertarPacienteExpediente
('DANIEL','CARDONA','M','1999-01-01','MONTERREY','NUEVO LEON','3144844664','O POSITIVO','NA','NA');

--------------------------------------------

CREATE OR REPLACE PROCEDURE CLINICA.insertarEspecialista
(nombre VARCHAR(20), apellido VARCHAR(20), sexo CHAR(1), fechaNacimiento DATE, especialidad VARCHAR(30))
LANGUAGE plpgsql
AS $$
DECLARE 
	idEspecialista CHAR(7);
	idEspecialistaAux CHAR(4);
BEGIN 

	IF NOT EXISTS (SELECT pk_idEspecialista FROM CLINICA.ESPECIALISTA WHERE pk_idEspecialista = 'ME-0001') THEN
		idEspecialista = 'ME-0001';
	ELSE
		idEspecialista := (SELECT pk_idEspecialista FROM CLINICA.ESPECIALISTA ORDER BY pk_idEspecialista DESC LIMIT 1);
		idEspecialistaAux := (SELECT SUBSTRING(idEspecialista, 4, 7));
		idEspecialistaAux := CAST(idEspecialistaAux AS INT)+1;
		
		IF idEspecialistaAux < '9' THEN
			idEspecialista = 'ME-000' || idEspecialistaAux;
		ELSEIF idEspecialistaAux BETWEEN '10' AND '99' THEN
			idEspecialista = 'ME-00' || idEspecialistaAux;
		ELSEIF idEspecialistaAux BETWEEN '100' AND '999' THEN
			idEspecialista = 'ME-0' || idEspecialistaAux;
		END IF;
	END IF;
	
	INSERT INTO CLINICA.ESPECIALISTA VALUES (idEspecialista, nombre, apellido, sexo, fechaNacimiento, especialidad);
	
	RAISE NOTICE 'ESPECIALISTA INGRESADO CORRECTAMENTE';

END; $$

CALL CLINICA.insertarEspecialista
('JORGE','VELASCO','M','1990-01-01','PEDIATRIA');

--------------------------------------------

CREATE OR REPLACE PROCEDURE CLINICA.insertarCitaAgendarCita
(idPaciente CLINICA.ID_PACIENTE, idEspecialista CLINICA.ID_MEESPECIALISTA, consultorio VARCHAR(20),
fechaCita DATE, horaCita TIME, observaciones VARCHAR(100))
LANGUAGE plpgsql
AS $$
DECLARE
	idCita CHAR(7);
	idCitaAux CHAR(4);
	fechaActual DATE := (SELECT CURRENT_DATE);
	horaActual TIME := (SELECT CURRENT_TIME);
	turno VARCHAR(10);
BEGIN

	IF NOT EXISTS (SELECT pk_idCita FROM CLINICA.CITA WHERE pk_idCita = 'CM-0001') THEN
		idCita = 'CM-0001';
	ELSE
		idCita := (SELECT pk_idCita FROM CLINICA.CITA ORDER BY pk_idCita DESC LIMIT 1);
		idCitaAux := (SELECT SUBSTRING(idCita, 4, 7));
		idCitaAux := CAST(idCitaAux AS INT)+1;
		
		IF idCitaAux < '9' THEN
			idCita = 'CM-00' || idCitaAux;
		ELSEIF idCitaAux BETWEEN '10' AND '99' THEN
			idCita = 'CM-0' || idCitaAux;
		ELSEIF idCitaAux BETWEEN '100' AND '999' THEN
			idCita = 'CM-' || idCitaAux;
		END IF;
	END IF;
	
	IF horaCita >= '12:00' THEN
		turno = 'VESPERTINO';
	ELSE
		turno = 'MATUTINO';
	END IF;
	
	IF fechaCita < fechaActual THEN
		RAISE NOTICE 'NO SE PUEDE HACER CITAS EN FECHAS ANTERIORES - CITA NO INGRESADA';
	ELSE
		INSERT INTO CLINICA.CITA VALUES (idCita, idPaciente, fechaActual, horaActual);
		
		INSERT INTO CLINICA.AGENDAR_CITA VALUES 
		(idCita, idEspecialista, consultorio, fechaCita, horaCita, turno, 'ESPERA', observaciones);
		
		RAISE NOTICE 'CITA INGRESADA CORRECTAMENTE';
	END IF;

END; $$

CALL CLINICA.insertarCitaAgendarCita
('P-0001','ME-0001','CONSULTORIO 1','2023-11-02','12:00','NA');

--------------------------------------------

CREATE OR REPLACE PROCEDURE CLINICA.insertarDiagnostico
(idEspecialista CLINICA.ID_MEESPECIALISTA, idPaciente CLINICA.ID_PACIENTE, edad CHAR(3), peso CHAR(3),
altura CHAR(3), presionArterial CHAR(6), diagnostico VARCHAR(100), recetario VARCHAR(100))
LANGUAGE plpgsql
AS $$
DECLARE
	imc REAL;
	pesoNum INT;
	alturaNum REAL;
	nivelPeso CHAR(10);
	fechaCreacion TIMESTAMP := (SELECT LEFT(CAST (CURRENT_TIMESTAMP AS CHAR(30)),19));
BEGIN

	pesoNum := peso;
	alturaNum := altura;
	imc := pesoNum / (alturaNum*alturaNum);
	imc := CAST(imc AS CHAR(5));
	
	IF imc < '18.5' THEN
		nivelPeso = 'BAJO';
	ELSEIF imc BETWEEN '18.5' AND '24.9' THEN
		nivelPeso = 'NORMAL';
	ELSEIF imc BETWEEN '25.0' AND '29.9' THEN
		nivelPeso = 'SOBREPESO';
	ELSE
		nivelPeso = 'OBESIDAD';
	END IF;
	
	INSERT INTO CLINICA.EXPEDIENTE_DIAGNOSTICO 
	(fk_idEspecialista, fk_idPaciente, edad, peso, altura, imc, nivelPeso, presionArterial,
	diagnostico, recetario, fechaCreacion)
	VALUES (idEspecialista, idPaciente, edad, peso, altura, imc, nivelPeso, presionArterial,
		   diagnostico, recetario, fechaCreacion);
		   
	RAISE NOTICE 'EXPEDIENTE DIAGNOSTICO INGRESADO CORRECTAMENTE';

END; $$

CALL CLINICA.insertarDiagnostico
('ME-0001','P-0001','20','80','1.75','120/70','NA','NA');

--------------------------------------------

CREATE OR REPLACE PROCEDURE CLINICA.cancelarCita
(idCita CLINICA.ID_CITA)
LANGUAGE plpgsql
AS $$
DECLARE
	status CHAR(10) := (SELECT status FROM CLINICA.AGENDAR_CITA WHERE fk_idCita = idCita);
BEGIN

	IF NOT EXISTS (SELECT pk_idCita FROM CLINICA.CITA WHERE pk_idCita = idCita) THEN
		RAISE NOTICE 'EL ID DE LA CITA NO EXISTE EN LA BASE DE DATOS';
	ELSEIF status = 'REALIZADO' THEN
		RAISE NOTICE 'LA CITA YA HA SIDO REALIZADA';
	ELSE
		UPDATE CLINICA.AGENDAR_CITA SET status = 'CANCELADA' WHERE fk_idCita = idCita;
		
		RAISE NOTICE 'CITA CANCELADA CORRECTAMENTE';
	END IF;

END; $$

CALL CLINICA.cancelarCita('CM-0010');

--------------------------------------------

CREATE OR REPLACE PROCEDURE CLINICA.realizarCita(idCita CLINICA.ID_CITA)
LANGUAGE plpgsql
AS $$
DECLARE 
	status CHAR(10) := (SELECT status FROM CLINICA.AGENDAR_CITA WHERE fk_idCita = idCita);
BEGIN

	IF NOT EXISTS (SELECT pk_idCita FROM CLINICA.CITA WHERE pk_idCita = idCita) THEN
		RAISE NOTICE 'EL ID DE LA CITA NO EXISTE EN LA BASE DE DATOS';
	ELSEIF status = 'CANCELADA' THEN
		RAISE NOTICE 'LA CITA YA HA SIDO CANCELADA';
	ELSE
		UPDATE CLINICA.AGENDAR_CITA SET status = 'REALIZADA' WHERE fk_idCita = idCita;
		
		RAISE NOTICE 'CITA REALIZADA CORRECTAMENTE';
	END IF;

END; $$

CALL CLINICA.realizarCita('CM-0011');

--Borrar funciones y procedure

DROP FUNCTION CLINICA.numerosParesImpares(n INT);

DROP PROCEDURE CLINICA.realizarCita(idCita CLINICA.ID_CITA);

--Trigger

CREATE TABLE CLINICA.DATOS_PACIENTES_PERSONAL(
	folio SERIAL PRIMARY KEY,
	tipoMovimiento VARCHAR(20),
	idPaciente CLINICA.ID_PACIENTE,
	nombrePaciente VARCHAR(20),
	apellidoPaciente VARCHAR(20),
	usuario VARCHAR(20),
	fecha TIMESTAMP
);

--Creación de la función

CREATE OR REPLACE FUNCTION CLINICA.BorradoPaciente() RETURNS TRIGGER 
AS $$
DECLARE
	usuario VARCHAR(20) := (SELECT CURRENT_USER);
	fechaActual TIMESTAMP := (SELECT LEFT(CAST (CURRENT_TIMESTAMP AS CHAR(30)), 19));
BEGIN
	INSERT INTO CLINICA.DATOS_PACIENTES_PERSONAL 
	(tipoMovimiento, idPaciente, nombrePaciente, apellidoPaciente, usuario, fecha) VALUES
	('BORRADO', OLD.pk_idPaciente, OLD.nombre ,OLD.apellido, usuario, fechaActual);
RETURN NEW;
END
$$
LANGUAGE plpgsql;

--Creación del trigger

CREATE OR REPLACE TRIGGER Borrado_Paciente AFTER DELETE ON CLINICA.PACIENTE
FOR EACH ROW
EXECUTE PROCEDURE CLINICA.BorradoPaciente();

--------------------------------------------

CREATE OR REPLACE FUNCTION CLINICA.ActualizadoPaciente() RETURNS TRIGGER 
AS $$
DECLARE
	usuario VARCHAR(20) := (SELECT current_user);
	fechaActual TIMESTAMP := (SELECT LEFT(CAST (CURRENT_TIMESTAMP AS CHAR(30)), 19 ));
BEGIN
	INSERT INTO CLINICA.DATOS_PACIENTES_PERSONAL 
	(tipoMovimiento, idPaciente, nombrePaciente, apellidoPaciente, usuario, fecha) VALUES
	('ACTUALIZACIÓN', OLD.pk_idPaciente, OLD.nombre ,OLD.apellido, usuario, fechaActual);
RETURN NEW;
END
$$
LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER Actualizado_Paciente AFTER UPDATE ON CLINICA.PACIENTE
FOR EACH ROW
EXECUTE PROCEDURE CLINICA.ActualizadoPaciente();

DELETE FROM CLINICA.PACIENTE WHERE pk_idPaciente = 'P-0014';

UPDATE CLINICA.PACIENTE SET ciudad = 'MONTERREY' WHERE pk_idPaciente = 'P-0012';

SELECT * FROM CLINICA.DATOS_PACIENTES_PERSONAL;

GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA CLINICA TO dba WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA TO dba WITH GRANT OPTION;

GRANT INSERT ON CLINICA.DATOS_PACIENTES_PERSONAL TO recepcionista WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA TO recepcionista WITH GRANT OPTION;

--Borrar trigger

DROP TRIGGER Actualizado_Paciente ON CLINICA.PACIENTE;

--Servidores POSTGRESQL

SHOW data_directory; --donde estan almacenados los datos de prostgreSQL

--Vistas del sistema

SELECT * FROM pg_views; --almacenamiento de las vistas

SELECT * FROM pg_user; --vita de los usuarios

SELECT * FROM pg_roles;

SELECT * FROM pg_tables WHERE schemaname = 'clinica'; --vista de las tablas

SELECT * FROM pg_timezone_names; --zona horaria

--Analizar consultas

EXPLAIN ANALYZE
SELECT * FROM CLINICA.PACIENTE;

EXPLAIN (FORMAT JSON)
SELECT * FROM CLINICA.PACIENTE;

--Indices

EXPLAIN ANALYZE
SELECT edad, peso, altura FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

CREATE INDEX edad_peso_altura ON CLINICA.EXPEDIENTE_DIAGNOSTICO(edad,  peso, altura); --crear el index

SELECT * FROM pg_indexes WHERE schemaname = 'clinica';

DROP INDEX CLINICA.edad_peso_altura; --borrar index

--Tablespace

SELECT * FROM pg_tablespace;

CREATE TABLESPACE ts_ejemplo LOCATION 'C:\Users\tatan\OneDrive\Escritorio\TS'; --crear tablespace

CREATE TABLE CLINICA.EJEMPLO(i INT);

ALTER TABLE CLINICA.EJEMPLO SET TABLESPACE ts_ejemplo;

DROP TABLESPACE ts_ejemplo; --borrar tablespace

DROP TABLE CLINICA.EJEMPLO;
